{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-477a3113277b1cdb.js","src/index.js","src/js/partials/trends.js","src/js/markup/trendsMarkup.js","src/js/partials/upcoming.js","src/js/markup/upcomingMarkup.js","node_modules/@parcel/runtime-js/lib/runtime-7d02cbfb9c535300.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"EVgbq\\\":\\\"index.80b625e9.js\\\",\\\"fMRwm\\\":\\\"default-movie-img@2x.2bd481c5.png\\\",\\\"5UbS1\\\":\\\"catalog.56fc9316.css\\\",\\\"hBuIx\\\":\\\"library.9c2e7e59.js\\\"}\"));","import './js/utils/active-page';\nimport './js/utils/scroll-top-btn';\nimport './js/utils/mobile-menu';\n\nimport './js/partials/hero';\nimport './js/partials/trends';\nimport './js/partials/upcoming';","import { Loading } from 'notiflix/build/notiflix-loading-aio';\n\nimport { fetchTrendingMoviesByWeek } from '../services/fetch-api';\nimport { trendsMarkup } from '../markup/trendsMarkup';\nimport { openMovieInfoModal } from '../utils/modal.js';\nimport { refs } from '../refs.js';\n\nexport const renderTrendingMoviesByWeek = async () => {\n  try {\n    Loading.standard('Loading...', {\n      className: 'hero-loading',\n      backgroundColor: 'rgba(0,0,0,0.8)',\n      svgColor: 'rgb(248, 119, 25)',\n    });\n    const { results } = await fetchTrendingMoviesByWeek();\n    refs.movieList.innerHTML = trendsMarkup(results);\n    refs.movieList.addEventListener('click', handlerMovieListClick);\n  } catch (error) {\n    console.log(`Error in renderTrendingMoviesByWeek: ${error}`);\n    // FIXME: add default cards\n  } finally {\n    Loading.remove();\n  }\n};\n\nfunction handlerMovieListClick(e) {\n  const closestId = e.target.closest('[data-movie-id]');\n  if (!closestId) return;\n  const movieId = closestId.dataset.movieId;\n  openMovieInfoModal(movieId);\n}\n\nrenderTrendingMoviesByWeek();","import { randomIndex } from '../utils/random-index';\nimport { movieListMarkup } from './movieListMarkup';\n\nexport const trendsMarkup = movies => {\n  let indexList;\n\n  window.innerWidth < 768\n    ? (indexList = randomIndex())\n    : (indexList = randomIndex(3));\n\n  const markup = indexList\n    .map(index => movieListMarkup(movies[index]))\n    .join('');\n\n  return markup;\n};","import { Loading } from 'notiflix/build/notiflix-loading-aio';\n\nimport { fetchUpcomingMovies } from '../services/fetch-api';\nimport { upcomingMarkup } from '../markup/upcomingMarkup';\nimport { initAddToLibraryBtn } from '../utils/ad-btn';\nimport { randomIndex } from '../utils/random-index';\nimport { refs } from '../refs.js';\n\nexport const renderUpcomingMovies = async () => {\n  const index = randomIndex()[0];\n\n  try {\n    Loading.standard('Loading...', {\n      backgroundColor: 'rgba(0,0,0,0.8)',\n      svgColor: 'rgb(248, 119, 25)',\n    });\n    const { results } = await fetchUpcomingMovies();\n    refs.upcomingContainer.innerHTML = upcomingMarkup(results[index]);\n    const upcomingBtn = document.querySelector('.upcoming .btn');\n    initAddToLibraryBtn(upcomingBtn);\n  } catch (error) {\n    console.log(`upcomingError: ${error}`);\n  } finally {\n    Loading.remove();\n  }\n};\n\nrenderUpcomingMovies();","import { getGenreNames } from '../utils/genre-names';\n\nexport const upcomingMarkup = movie => {\n  const {\n    id,\n    title,\n    original_title,\n    vote_average,\n    vote_count,\n    popularity,\n    overview,\n    genre_ids,\n    poster_path,\n    backdrop_path,\n    release_date,\n  } = movie;\n  let posterUrl;\n\n  const genres = getGenreNames(genre_ids).join(', ');\n\n  window.innerWidth < 768\n    ? (posterUrl = `https://image.tmdb.org/t/p/w500/${poster_path}`)\n    : (posterUrl = `https://image.tmdb.org/t/p/original/${backdrop_path}`);\n\n  if (!poster_path || !backdrop_path) {\n    if (window.innerWidth < 768) {\n      posterUrl = new URL(\n        '/src/images/default-movie-img@2x.png',\n        import.meta.url\n      );\n    }\n\n    if (window.innerWidth >= 768 && window.innerWidth < 1280) {\n      posterUrl = new URL(\n        '/src/images/default-movie-img@2x.png',\n        import.meta.url\n      );\n    }\n\n    if (window.innerWidth >= 1280) {\n      posterUrl = new URL(\n        '/src/images/default-movie-img@2x.png',\n        import.meta.url\n      );\n    }\n  }\n\n  const markup = `\n    <div class=\"upcoming__thumb\">\n      <img class =\"upcoming__image\" src=\"${posterUrl}\" alt=\"${\n    title || original_title\n  }\" />\n    </div>\n\n    <div class=\"upcoming__meta\">\n      <h3 class=\"upcoming__caption\">${title || original_title}</h3>\n      \n      \n      <div class=\"upcoming__ctx\">\n        <ul class=\"upcoming__list\">\n          <li class=\"upcoming__item\">\n            <div class=\"upcoming__desc\">Release date</div>\n            <div class=\"upcoming__date\">${release_date.slice(0, 4)}</div>\n          </li>\n          <li class=\"upcoming__item\">\n            <div class=\"upcoming__desc\">Vote / Votes</div>\n            <div class=\"upcoming__value\">\n              <span class=\"tag\">\n                ${vote_average.toFixed(1)}\n              </span>\n              &nbsp;/&nbsp;\n              <span class=\"tag\">\n                ${vote_count}\n              </span>\n            </div>\n          </li>\n        </ul>\n        <ul class=\"upcoming__list\">\n          <li class=\"upcoming__item\">\n            <div class=\"upcoming__desc\">Popularity</div>\n            <div class=\"upcoming__value\">${popularity.toFixed(1)}</div>\n          </li>\n          <li class=\"upcoming__item\">\n            <div class=\"upcoming__desc\">Genre</div>\n            <div class=\"upcoming__value\">${genres}</div>\n          </li>\n        </ul>\n      </div>\n\n      <div class=\"upcoming__about\">\n        <h3 class=\"upcoming__subtitle\">About</h3>\n        <p class=\"upcoming__text\">${overview}</p>\n      </div>\n\n      <button class=\"btn btn--primary\" data-movie-id=\"${id}\" data-lable=\"upcoming\" type=\"button\">\n        Add to my library\n      </button>\n    </div>`;\n\n  return markup;\n};","module.exports = require('./helpers/bundle-url').getBundleURL('EVgbq') + require('./helpers/bundle-manifest').resolve(\"fMRwm\");"],"names":["parcelRequire","register","JSON","parse","$bpxeT","$kOiWC","$6baad6d794362439$export$c1bd8589e23794f0","movies","window","innerWidth","randomIndex","map","index","$7bc64","movieListMarkup","join","$85bef3a4c56bdc9f$export$39585ff98928de2a","$parcel$interopDefault","$2TvXO","mark","_callee","results","$7rQOT","Loading","standard","className","backgroundColor","svgColor","$1ILcr","fetchTrendingMoviesByWeek","_ctx","sent","$4Nugj","refs","movieList","innerHTML","addEventListener","$85bef3a4c56bdc9f$var$handlerMovieListClick","console","log","concat","t0","remove","e","closestId","target","closest","movieId","dataset","$8quDb","openMovieInfoModal","$87daI","$772b72f7ab597d0a$exports","getBundleURL","resolve","$ab40d5a3565e84d7$export$d13d1cf316ef3ba9","upcomingBtn","fetchUpcomingMovies","upcomingContainer","movie","posterUrl","id","title","original_title","vote_average","vote_count","popularity","overview","genre_ids","poster_path","backdrop_path","release_date","genres","getGenreNames","URL","slice","toFixed","document","querySelector","$cGvxV","initAddToLibraryBtn"],"version":3,"file":"index.80b625e9.js.map"}